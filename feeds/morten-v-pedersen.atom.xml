<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>blog.mortenvp.com</title><link href="http://blog.mortenvp.com/" rel="alternate"></link><link href="http://blog.mortenvp.com/feeds/morten-v-pedersen.atom.xml" rel="self"></link><id>http://blog.mortenvp.com/</id><updated>2015-03-03T12:43:00+01:00</updated><entry><title>Creating slides using the iPython notebook</title><link href="http://blog.mortenvp.com/creating-slides-using-the-ipython-notebook.html" rel="alternate"></link><updated>2015-03-03T12:43:00+01:00</updated><author><name>Morten V. Pedersen</name></author><id>tag:blog.mortenvp.com,2015-03-03:creating-slides-using-the-ipython-notebook.html</id><summary type="html">&lt;p&gt;This semester I'm teaching a free study activity called C++11/14 basic
introduction and as an experiment I decided to try to create my slides
using an iPython notebook.&lt;/p&gt;
&lt;p&gt;Turns out this works pretty well, and&lt;/p&gt;
&lt;h2&gt;Hosting the slides&lt;/h2&gt;
&lt;p&gt;Since the slides are basically a html website with some javascript we can
easily make the slides available for online viewing.&lt;/p&gt;
&lt;p&gt;For the slides to work properly we also have to host the
&lt;a href="https://github.com/hakimel/reveal.js"&gt;reveal.js&lt;/a&gt; javascript library. To
ensure that it will work as expected you should use the same version of
reveal.js as the iPython However, this did not work straight out of the box
so here is a small tip.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ipython nbconvert --to slides lecture1.ipynb --post serve --log-level=INFO
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will generate some output and show where the in-built webserver
forwards requests to the reveal.js library:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;[NbConvertApp] Redirecting reveal.js requests to https://cdn.jsdelivr.net/reveal.js/2.5.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So if we want to use the same version of reveal.js we should use version 2.5.0.&lt;/p&gt;</summary></entry><entry><title>Creating a Pelican powered iPython notebook blog</title><link href="http://blog.mortenvp.com/creating-a-pelican-powered-ipython-notebook-blog.html" rel="alternate"></link><updated>2015-02-26T15:00:00+01:00</updated><author><name>Morten V. Pedersen</name></author><id>tag:blog.mortenvp.com,2015-02-26:creating-a-pelican-powered-ipython-notebook-blog.html</id><summary type="html">&lt;p&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;During the last couple of months I've started to use the iPython notebook for more and more stuff. Inspired by &lt;a href="https://jakevdp.github.io/blog/2013/05/07/migrating-from-octopress-to-pelican/"&gt;Python Perambulations&lt;/a&gt; by Jake VanderPlas, I decided to also try to use it for blogging. In the following I'll try to document how I've setup things.&lt;/p&gt;
&lt;h2 id="tools-involved"&gt;Tools involved&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://getpelican.com"&gt;Pelican&lt;/a&gt;: Pelican is a static site generator, written in Python.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ipython.com"&gt;iPython&lt;/a&gt;: What we will use to write our notebooks in.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docker.com"&gt;Docker&lt;/a&gt;: Container for the tools&lt;/li&gt;
&lt;li&gt;&lt;a href="http://fabfile.org"&gt;Fabric&lt;/a&gt;: Automates tasks like building and publishing the site.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="installing-pelican"&gt;Installing Pelican&lt;/h2&gt;
&lt;p&gt;On the GitHub README.md for the Pythonic Perambulations blog Jake VanderPlas recommonds using Pelican 3.3+. Fortunatly Ubuntu 14.10 ships with 3.4.0 (run: &lt;code&gt;sudo aptitude show python-pelican&lt;/code&gt; to check). So installation is easy:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo aptitude install python-pelican&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="hosting-the-site"&gt;Hosting the site&lt;/h2&gt;
&lt;p&gt;Here I will again follow the approach taken by Jake VanderPlas for his &lt;a href="http://jakevpd.github.io"&gt;Python Perambulations&lt;/a&gt; blog.&lt;/p&gt;
&lt;p&gt;The basic idea is to create two &lt;a href="http://github.com"&gt;GitHub&lt;/a&gt; reporitories. The first contains the Pelican project files, notebooks, and other material used when generating the site. The second contains the generated html files etc. With this approach we can use &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; for the second repository to make the site available on the web.&lt;/p&gt;
&lt;p&gt;The first repoitory I named &lt;a href="https://github.com/mortenvp/mortenvp-pelican"&gt;mortenvp-pelican&lt;/a&gt; and the second &lt;a href="https://github.com/mortenvp/mortenvp.github.io"&gt;mortenvp.github.io&lt;/a&gt; which according to the GitHub Pages documentation is the mandtory name for a personal pages repository.&lt;/p&gt;
&lt;h2 id="generating-the-initial-project"&gt;Generating the initial project&lt;/h2&gt;
&lt;p&gt;In this case I just follow the Pelican &lt;a href="http://docs.getpelican.com/en/3.5.0/quickstart.html"&gt;quickstart&lt;/a&gt; section to setup a basic site.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone &amp;lt;git-url-to-mortenvp-pelican.git&amp;gt;
cd mortenvp-pelican
pelican-quickstart&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick start will ask you a bunch of questions, these were my answers:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Welcome to pelican-quickstart v3.4.0.

This script will help you create a new Pelican-based website.

Please answer the following questions so this script can generate the files
needed by Pelican.

    
&amp;gt; Where do you want to create your new web site? [.] 
&amp;gt; What will be the title of this web site? blog.mortenvp.com
&amp;gt; Who will be the author of this web site? Morten V. Pedersen
&amp;gt; What will be the default language of this web site? [en] 
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   (Y/n) 
&amp;gt; What is your URL prefix? (see above example; no trailing slash) http://blog.mortenvp.com
&amp;gt; Do you want to enable article pagination? (Y/n) 
&amp;gt; How many articles per page do you want? [10] 
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n) 
&amp;gt; Do you want an auto-reload &amp;amp; simpleHTTP script to assist with theme and site development? (Y/n) 
&amp;gt; Do you want to upload your website using FTP? (y/N) 
&amp;gt; Do you want to upload your website using SSH? (y/N) 
&amp;gt; Do you want to upload your website using Dropbox? (y/N) 
&amp;gt; Do you want to upload your website using S3? (y/N) 
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? (y/N) 
&amp;gt; Do you want to upload your website using GitHub Pages? (y/N) Y
&amp;gt; Is this your personal page (username.github.io)? (y/N) y
Done. Your new project is available at /home/mvp/dev/mortenvp-pelican&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="plugin-enabeling-ipython-notebooks"&gt;Plugin enabeling iPython notebooks&lt;/h2&gt;
&lt;p&gt;Support for including an iPython notebook is available in the &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/liquid_tags"&gt;Liquid-style Tags&lt;/a&gt; plugin. Following the &lt;a href="https://github.com/getpelican/pelican-plugins"&gt;README&lt;/a&gt; in the Pelican Plugins we add the pelican-plugins repository as a submodule:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git submodule add git@github.com:getpelican/pelican-plugins.git&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and activate the liquid-style Tags:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PLUGIN_PATHS = [&amp;#39;pelican-plugins&amp;#39;]
PLUGINS = [&amp;#39;liquid_tags.img&amp;#39;, &amp;#39;liquid_tags.video&amp;#39;,
           &amp;#39;liquid_tags.youtube&amp;#39;, &amp;#39;liquid_tags.vimeo&amp;#39;,
           &amp;#39;liquid_tags.include_code&amp;#39;, &amp;#39;liquid_tags.notebook&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can choose the location for the notebooks by specifying:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NOTEBOOK_DIR = &amp;#39;notebooks&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="including-the-notebook-css-in-our-choosen-theme"&gt;Including the notebook CSS in our choosen theme&lt;/h3&gt;
&lt;p&gt;At the top of the pelicanconf.py add:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from __future__ import unicode_literals
import os&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which enables us to use (copied from &lt;a href="https://github.com/jakevdp/PythonicPerambulations/blob/master/pelicanconf.py"&gt;here&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# The theme file should be updated so that the base header contains the line:
#
#  {% if EXTRA_HEADER %}
#    {{ EXTRA_HEADER }}
#  {% endif %}
# 
# This header file is automatically generated by the notebook plugin
if not os.path.exists(&amp;#39;_nb_header.html&amp;#39;):
    import warnings
    warnings.warn(&amp;quot;_nb_header.html not found.  &amp;quot;
                  &amp;quot;Rerun make html to finalize build.&amp;quot;)
else:
    EXTRA_HEADER = open(&amp;#39;_nb_header.html&amp;#39;).read().decode(&amp;#39;utf-8&amp;#39;)
    &lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="choosing-a-theme"&gt;Choosing a theme&lt;/h2&gt;
&lt;p&gt;I'm not a big fan of the default Pelican theme, so instead I chose to use the &lt;a href="https://github.com/fle/pelican-sober"&gt;Pelican-sober&lt;/a&gt; theme.&lt;/p&gt;
&lt;p&gt;Since the &lt;code&gt;EXTRA_HEADER&lt;/code&gt; section (as described above) isn't present in the Pelican-sober theme's &lt;code&gt;templates/base.html&lt;/code&gt;, we need to add it. To do this I forked the repository to my user and made the changes there.&lt;/p&gt;
&lt;p&gt;Once this is done we can use our chosen theme by editing the &lt;code&gt;THEME&lt;/code&gt; variable in &lt;code&gt;pelican.conf&lt;/code&gt; (read about this &lt;a href="http://nafiulis.me/making-a-static-blog-with-pelican.html#themes"&gt;here&lt;/a&gt;), so to summarize:&lt;/p&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;Select a theme and ensure that it has the &lt;code&gt;EXTRA_HEADER&lt;/code&gt; section.&lt;/li&gt;
&lt;li&gt;Add the theme git repository as a submodule to our site repository &lt;code&gt;git submodule add git@github.com:url-to-repo.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add a &lt;code&gt;THEME = 'pelican-sober'&lt;/code&gt; vaiable inside &lt;code&gt;pelicanconf.py&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="adding-a-post"&gt;Adding a post&lt;/h2&gt;
&lt;p&gt;Adding a post is pretty easy, create a simple markdown file with some basic tags. As an example &lt;code&gt;constent/first_post.md&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Title: My fist post
Date: 2015-02-26 15:00

# About
Here we can write the blog post using markdown&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="including-a-notebook"&gt;Including a notebook&lt;/h2&gt;
&lt;p&gt;To include a notebook called &lt;code&gt;filename.ipynb&lt;/code&gt; copy it to the &lt;code&gt;content/notebooks/&lt;/code&gt; directory and add it to a post using:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{% notebook filename.ipynb %}&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="generating-the-site"&gt;Generating the site&lt;/h2&gt;
&lt;p&gt;I generate the site using &lt;a href="http://docker.com"&gt;Docker&lt;/a&gt; and &lt;a href="http://fabfile.org"&gt;Fabric&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="docker"&gt;Docker&lt;/h3&gt;
&lt;p&gt;Initially when I wanted to generate the site I got and error &lt;code&gt;Incomplete format&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Searching the web the error seems to be related to a Mardown &lt;a href="https://github.com/getpelican/pelican-plugins/pull/321"&gt;issue&lt;/a&gt; with the pelican pugin. The issue was resolved, however comments later indicated that it did not work for everybody, including me.&lt;/p&gt;
&lt;p&gt;One user confirmed that the error occured with Markdown 2.5 and that downgrading to 2.4 solved the issue. To verify this fix I decided to install pelican and the dependencies in a Docker container to not interfer with the system packages already on my system.&lt;/p&gt;
&lt;p&gt;The Docker container I created for this purpose is available &lt;a href="https://registry.hub.docker.com/u/mortenvp/mortenvp-docker/"&gt;here&lt;/a&gt;. The container is invoked using fabric described next.&lt;/p&gt;
&lt;h3 id="fabric"&gt;Fabric&lt;/h3&gt;
&lt;p&gt;Is a tool that can be use to automate performing some tasks either on the local or a remote machine. The &lt;code&gt;pelican-quickstart&lt;/code&gt; already creates a &lt;code&gt;fabfile&lt;/code&gt; for generating and deploying the site. I just adapted it to use If you check the &lt;a href="https://github.com/mortenvp/mortenvp-pelican/blob/master/fabfile.py"&gt;fabfile&lt;/a&gt; in the &lt;a href="https://github.com/mortenvp/mortenvp-pelican"&gt;repository&lt;/a&gt; for this site you will see how I use the docker container to generate the content and then move it to the gihub.io repository.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;</summary></entry></feed>