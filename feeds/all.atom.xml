<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>blog.mortenvp.com</title><link href="http://blog.mortenvp.com/" rel="alternate"></link><link href="http://blog.mortenvp.com/feeds/all.atom.xml" rel="self"></link><id>http://blog.mortenvp.com/</id><updated>2015-04-28T14:39:00+02:00</updated><entry><title>Emulating Networks with Mininet</title><link href="http://blog.mortenvp.com/emulating-networks-with-mininet.html" rel="alternate"></link><updated>2015-04-28T14:39:00+02:00</updated><author><name>Morten V. Pedersen</name></author><id>tag:blog.mortenvp.com,2015-04-28:emulating-networks-with-mininet.html</id><summary type="html">&lt;p&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Some time ago I came across &lt;a href="http://mininet.org/"&gt;Mininet&lt;/a&gt; which allows us setup and emulate networks on a single machine. Mininet uses the &lt;a href="http://en.wikipedia.org/wiki/LXC"&gt;Linux container&lt;/a&gt; technology (similar to &lt;a href="http://docker.com"&gt;Docker&lt;/a&gt;) to run multiple lightweight isolated Linux environments on a single Linux host. I never had time to play with it, but recently I wanted to experiment with a new transport protocol and see how it reacted to lossy links and Mininet seemed like an good choice for emulating the network.&lt;/p&gt;
&lt;p&gt;Mininet seems quite popular for people how wants to emulate and experiment with newer networking concepts such as SDN (Software Defined Networks). Beause the overhead of running Linux containers is very low, it allows us to emulate large networks with many connected hosts on a single computer (unfeasible with virtual machines). But, it can also be used to emulated simple networks like point-to-point links, with some loss and delay characteristics. Which is what we will do here. Another great strength of Mininet is that it allows us to run existing applications over these networks. So for example on one emulated host I can open the Firefox browser and on another host a webserver. I can even connect hosts on my emulated network to the real network and let them speak to services on the Internet. How great is that!?&lt;/p&gt;
&lt;p&gt;Let get this thing up and running.&lt;/p&gt;
&lt;h2 id="installing-mininet"&gt;Installing mininet&lt;/h2&gt;
&lt;p&gt;So the first thing we need to do is to install Mininet. There are a copule of options to choose from the easiest way it to use the prepared virtual machine. You can find additional instructions on how to set it up on the Mininet webpage &lt;a href="http://mininet.org/vm-setup-notes/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note: The Mininet setup guide suggests that you add a &amp;quot;Host-only Adapter&amp;quot;, when I initially tried this, it gave me a &amp;quot;no host only network adapter selected&amp;quot; error. This was resolve following the suggestions described &lt;a href="no%20host%20only%20network%20adapter%20selected"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For some reason after booting the Mininet virtual machine the &lt;em&gt;host only&lt;/em&gt; network was not brought up, the commands to make it accessible (run the following commands in the virtual machine):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo ip link set dev eth1 up
sudo dhclient eth1
ip link show&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First we bring up the interface, then ask for an IP using DHCP and finally we show the available interfaces and their IPs.&lt;/p&gt;
&lt;p&gt;Alternatively you can add the following to &lt;code&gt;/etc/network/interfaces&lt;/code&gt; inside the virtual machine:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;auto eth1
iface eth1 inet dhcp&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now I could ssh from my machine to the Mininet virtual machine using:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh mininet@192.168.56.101&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To make things a bit easier I add the following to &lt;code&gt;.ssh/config&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Host mininet
User mininet
HostName 192.168.56.101&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now I can login using &lt;code&gt;ssh mininet&lt;/code&gt;, see the bottom of the &lt;a href="http://mininet.org/vm-setup-notes/"&gt;Mininet VM setup notes&lt;/a&gt; guide to see how to setup password less login.&lt;/p&gt;
&lt;h3 id="shared-folders"&gt;Shared folders&lt;/h3&gt;
&lt;p&gt;To make it easier to move files between the virtual machine and the host computer you can setup a shared folder. In Virtualbox go to the settings for the Mininet virtual machine and you should be able to select a host folder that you want to share in the virtual machine. In my case is just created a folder called &lt;code&gt;vm_mininet&lt;/code&gt; in my home directory.&lt;/p&gt;
&lt;p&gt;To access shared folders inside the virtual machine we need to install the Virtualbox Guest Additions. Fortunately there is a package for that, so inside the Mininet virtual machine run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install virtualbox-guest-utils&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a final step you need to add the &lt;code&gt;mininet&lt;/code&gt; user to the &lt;code&gt;vboxsf&lt;/code&gt; group to have access to the folder:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;usermod -aG vboxsf mininet&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rebooting the virtual machine, and my shared folder shows up under &lt;code&gt;/media/sf_vm_mininet&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="creating-the-network"&gt;Creating the network&lt;/h2&gt;
&lt;p&gt;Now that we have the Mininet virtual machine up and running we can start to emulate some networks. One of the really cool things about Mininet is how easy it is to define network topologies using Python scripts. As an example lets try to create a network with two hosts and ping from one to the other.&lt;/p&gt;
&lt;p&gt;The script for setting this up is available &lt;a href="./simple_ping.py"&gt;here&lt;/a&gt;. The &lt;code&gt;%%file simple_ping.py&lt;/code&gt; is an iPython cell magic command that will save the content of the cell to a file called &lt;code&gt;simple_ping.py&lt;/code&gt;, so that we later can runn the script in our Mininet virtual machine.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[8]:
&lt;/div&gt;

&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="k"&gt;file&lt;/span&gt; &lt;span class="n"&gt;simple_ping&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="c"&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;Simple example of point-to-point link running ping&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mininet.topo&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Topo&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mininet.net&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Mininet&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mininet.node&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OVSController&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mininet.link&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TCLink&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mininet.util&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pmonitor&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mininet.log&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setLogLevel&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;setLogLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# Build the topology we want to play with:&lt;/span&gt;
    &lt;span class="c"&gt;#&lt;/span&gt;
    &lt;span class="c"&gt;#             +-----------------------+&lt;/span&gt;
    &lt;span class="c"&gt;#             |     10Mbit/s link     |&lt;/span&gt;
    &lt;span class="c"&gt;#             |     5ms delay         |&lt;/span&gt;
    &lt;span class="c"&gt;#             |     10% packet loss   |&lt;/span&gt;
    &lt;span class="c"&gt;#             |                       |&lt;/span&gt;
    &lt;span class="c"&gt;#             +-----------+-----------+&lt;/span&gt;
    &lt;span class="c"&gt;#                         |&lt;/span&gt;
    &lt;span class="c"&gt;#                         |&lt;/span&gt;
    &lt;span class="c"&gt;#                         |&lt;/span&gt;
    &lt;span class="c"&gt;#                         |&lt;/span&gt;
    &lt;span class="c"&gt;# +-------------+         v        +-------------+&lt;/span&gt;
    &lt;span class="c"&gt;# |             |                  |             |&lt;/span&gt;
    &lt;span class="c"&gt;# | host 1 (h1) +------------------+ host 2 (h2) |&lt;/span&gt;
    &lt;span class="c"&gt;# |             |                  |             |&lt;/span&gt;
    &lt;span class="c"&gt;# +-------------+                  +-------------+&lt;/span&gt;
    &lt;span class="c"&gt;#   &lt;/span&gt;
    &lt;span class="n"&gt;topo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Topo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;topo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addHost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;h1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;topo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addHost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;h2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;topo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addLink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;h1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;h2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bw&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;5ms&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loss&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# The TCLink is needed for use to set the bandwidth, delay and loss&lt;/span&gt;
    &lt;span class="c"&gt;# constraints on the link&lt;/span&gt;
    &lt;span class="c"&gt;#&lt;/span&gt;
    &lt;span class="c"&gt;# waitConnected&lt;/span&gt;
    &lt;span class="n"&gt;net&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mininet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;topo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;topo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TCLink&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;waitConnected&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getNodeByName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;h1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;h2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# Will open the two ping processes on both hosts and read the output&lt;/span&gt;
    &lt;span class="n"&gt;popens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;popens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ping -c10 {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IP&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
    &lt;span class="n"&gt;popens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ping -c10 {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IP&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pmonitor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;popens&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c"&gt;# Output each line written as &amp;quot;&amp;lt;hX&amp;gt;: some output&amp;quot;, where X&lt;/span&gt;
            &lt;span class="c"&gt;# will be replaced by the host number i.e. 1 or 2.&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;{}&amp;gt;: {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;

    &lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_stream output_stdout"&gt;
&lt;pre class="ipynb"&gt;Overwriting simple_ping.py
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;To run the above network simply copy the &lt;code&gt;simple_ping.py&lt;/code&gt; file to the Mininet virtual machine and run it (e.g. using the shared folder):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo ./simple_ping.py&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The script should now generate a bunch of output, giving you diagnostics about the network and output from the two ping processes.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mininet@mininet-vm:/media/sf_vm_mininet$ sudo ./simple_ping.py 
*** Creating network
*** Adding controller
*** Adding hosts:
h1 h2 
*** Adding switches:

*** Adding links:
(10.00Mbit 5ms delay 10% loss) (10.00Mbit 5ms delay 10% loss) (h1, h2) 
*** Configuring hosts
h1 h2 
*** Starting controller
c0 
*** Starting 0 switches

*** Waiting for switches to connect

&amp;lt;h2&amp;gt;: PING 10.0.0.1 (10.0.0.1) 56(84) bytes of data.
&amp;lt;h2&amp;gt;: 64 bytes from 10.0.0.1: icmp_seq=1 ttl=64 time=12.5 ms
&amp;lt;h1&amp;gt;: PING 10.0.0.2 (10.0.0.2) 56(84) bytes of data.
&amp;lt;h1&amp;gt;: 64 bytes from 10.0.0.2: icmp_seq=1 ttl=64 time=17.8 ms
&amp;lt;h1&amp;gt;: 64 bytes from 10.0.0.2: icmp_seq=2 ttl=64 time=10.4 ms
&amp;lt;h2&amp;gt;: 64 bytes from 10.0.0.1: icmp_seq=2 ttl=64 time=10.2 ms
&amp;lt;h1&amp;gt;: 64 bytes from 10.0.0.2: icmp_seq=3 ttl=64 time=10.2 ms
&amp;lt;h2&amp;gt;: 64 bytes from 10.0.0.1: icmp_seq=3 ttl=64 time=10.2 ms
&amp;lt;h1&amp;gt;: 64 bytes from 10.0.0.2: icmp_seq=4 ttl=64 time=10.2 ms
&amp;lt;h2&amp;gt;: 64 bytes from 10.0.0.1: icmp_seq=4 ttl=64 time=10.2 ms
&amp;lt;h2&amp;gt;: 64 bytes from 10.0.0.1: icmp_seq=5 ttl=64 time=10.1 ms
&amp;lt;h2&amp;gt;: 64 bytes from 10.0.0.1: icmp_seq=6 ttl=64 time=10.2 ms
&amp;lt;h1&amp;gt;: 64 bytes from 10.0.0.2: icmp_seq=6 ttl=64 time=10.2 ms
&amp;lt;h2&amp;gt;: 64 bytes from 10.0.0.1: icmp_seq=7 ttl=64 time=10.1 ms
&amp;lt;h2&amp;gt;: 64 bytes from 10.0.0.1: icmp_seq=8 ttl=64 time=10.1 ms
&amp;lt;h1&amp;gt;: 64 bytes from 10.0.0.2: icmp_seq=8 ttl=64 time=10.1 ms
&amp;lt;h2&amp;gt;: 64 bytes from 10.0.0.1: icmp_seq=9 ttl=64 time=10.1 ms
&amp;lt;h1&amp;gt;: 64 bytes from 10.0.0.2: icmp_seq=9 ttl=64 time=11.0 ms
&amp;lt;h2&amp;gt;: 64 bytes from 10.0.0.1: icmp_seq=10 ttl=64 time=10.1 ms
&amp;lt;h2&amp;gt;: 
&amp;lt;h2&amp;gt;: --- 10.0.0.1 ping statistics ---
&amp;lt;h2&amp;gt;: 10 packets transmitted, 10 received, 0% packet loss, time 9014ms
&amp;lt;h2&amp;gt;: rtt min/avg/max/mdev = 10.139/10.442/12.594/0.725 ms
&amp;lt;h1&amp;gt;: 64 bytes from 10.0.0.2: icmp_seq=10 ttl=64 time=10.1 ms
&amp;lt;h1&amp;gt;: 
&amp;lt;h1&amp;gt;: --- 10.0.0.2 ping statistics ---
&amp;lt;h1&amp;gt;: 10 packets transmitted, 8 received, 20% packet loss, time 9024ms
&amp;lt;h1&amp;gt;: rtt min/avg/max/mdev = 10.144/11.294/17.819/2.484 ms
*** Stopping 1 controllers
c0 
*** Stopping 0 switches

*** Stopping 1 links

*** Stopping 2 hosts
h1 h2 
*** Done&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pretty cool right?&lt;/p&gt;
&lt;p&gt;The code was tested with Mininet version &lt;code&gt;2.2.0&lt;/code&gt;, to see which version you have run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import mininet
&amp;gt;&amp;gt;&amp;gt; print(mininet.net.VERSION)
2.2.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more examples see the official &lt;a href="https://github.com/mininet/mininet/tree/master/examples"&gt;Mininet examples&lt;/a&gt;. Also you can find lots more information on the API etc. on the Mininet pages.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;em&gt;This blog post was written entirely in the IPython Notebook. The full notebook can be downloaded &lt;a href="https://cdn.rawgit.com/mortenvp/mortenvp-pelican/master/content/notebooks/emulating_networks_with_mininet/emulating_networks_with_mininet.ipynb"&gt;here&lt;/a&gt;, or viewed statically &lt;a href="http://nbviewer.ipython.org/url/github.com/mortenvp/mortenvp-pelican/blob/master/content/notebooks/emulating_networks_with_mininet/emulating_networks_with_mininet.ipynb"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;</summary></entry><entry><title>Creating slides using the iPython notebook</title><link href="http://blog.mortenvp.com/creating-slides-using-the-ipython-notebook.html" rel="alternate"></link><updated>2015-03-03T12:43:00+01:00</updated><author><name>Morten V. Pedersen</name></author><id>tag:blog.mortenvp.com,2015-03-03:creating-slides-using-the-ipython-notebook.html</id><summary type="html">&lt;p&gt;This semester I'm teaching a free study activity called C++11/14 basic
introduction and as an experiment I decided to try to create my slides
using an iPython notebook.&lt;/p&gt;
&lt;p&gt;Turns out this works pretty well, and&lt;/p&gt;
&lt;h2&gt;Hosting the slides&lt;/h2&gt;
&lt;p&gt;Since the slides are basically a html website with some javascript we can
easily make the slides available for online viewing.&lt;/p&gt;
&lt;p&gt;For the slides to work properly we also have to host the
&lt;a href="https://github.com/hakimel/reveal.js"&gt;reveal.js&lt;/a&gt; javascript library. To
ensure that it will work as expected you should use the same version of
reveal.js as the iPython However, this did not work straight out of the box
so here is a small tip.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ipython nbconvert --to slides lecture1.ipynb --post serve --log-level=INFO
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will generate some output and show where the in-built webserver
forwards requests to the reveal.js library:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;[NbConvertApp] Redirecting reveal.js requests to https://cdn.jsdelivr.net/reveal.js/2.5.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So if we want to use the same version of reveal.js we should use version 2.5.0.&lt;/p&gt;</summary></entry><entry><title>Creating a Pelican powered iPython notebook blog</title><link href="http://blog.mortenvp.com/creating-a-pelican-powered-ipython-notebook-blog.html" rel="alternate"></link><updated>2015-02-26T15:00:00+01:00</updated><author><name>Morten V. Pedersen</name></author><id>tag:blog.mortenvp.com,2015-02-26:creating-a-pelican-powered-ipython-notebook-blog.html</id><summary type="html">&lt;p&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;During the last couple of months I've started to use the iPython notebook for more and more stuff. Inspired by &lt;a href="https://jakevdp.github.io/blog/2013/05/07/migrating-from-octopress-to-pelican/"&gt;Python Perambulations&lt;/a&gt; by Jake VanderPlas, I decided to also try to use it for blogging. In the following I'll try to document how I've setup things.&lt;/p&gt;
&lt;h2 id="tools-involved"&gt;Tools involved&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://getpelican.com"&gt;Pelican&lt;/a&gt;: Pelican is a static site generator, written in Python.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ipython.com"&gt;iPython&lt;/a&gt;: What we will use to write our notebooks in.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docker.com"&gt;Docker&lt;/a&gt;: Container for the tools&lt;/li&gt;
&lt;li&gt;&lt;a href="http://fabfile.org"&gt;Fabric&lt;/a&gt;: Automates tasks like building and publishing the site.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="installing-pelican"&gt;Installing Pelican&lt;/h2&gt;
&lt;p&gt;On the GitHub README.md for the Pythonic Perambulations blog Jake VanderPlas recommonds using Pelican 3.3+. Fortunatly Ubuntu 14.10 ships with 3.4.0 (run: &lt;code&gt;sudo aptitude show python-pelican&lt;/code&gt; to check). So installation is easy:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo aptitude install python-pelican&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="hosting-the-site"&gt;Hosting the site&lt;/h2&gt;
&lt;p&gt;Here I will again follow the approach taken by Jake VanderPlas for his &lt;a href="http://jakevpd.github.io"&gt;Python Perambulations&lt;/a&gt; blog.&lt;/p&gt;
&lt;p&gt;The basic idea is to create two &lt;a href="http://github.com"&gt;GitHub&lt;/a&gt; reporitories. The first contains the Pelican project files, notebooks, and other material used when generating the site. The second contains the generated html files etc. With this approach we can use &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; for the second repository to make the site available on the web.&lt;/p&gt;
&lt;p&gt;The first repoitory I named &lt;a href="https://github.com/mortenvp/mortenvp-pelican"&gt;mortenvp-pelican&lt;/a&gt; and the second &lt;a href="https://github.com/mortenvp/mortenvp.github.io"&gt;mortenvp.github.io&lt;/a&gt; which according to the GitHub Pages documentation is the mandtory name for a personal pages repository.&lt;/p&gt;
&lt;h2 id="generating-the-initial-project"&gt;Generating the initial project&lt;/h2&gt;
&lt;p&gt;In this case I just follow the Pelican &lt;a href="http://docs.getpelican.com/en/3.5.0/quickstart.html"&gt;quickstart&lt;/a&gt; section to setup a basic site.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone &amp;lt;git-url-to-mortenvp-pelican.git&amp;gt;
cd mortenvp-pelican
pelican-quickstart&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick start will ask you a bunch of questions, these were my answers:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Welcome to pelican-quickstart v3.4.0.

This script will help you create a new Pelican-based website.

Please answer the following questions so this script can generate the files
needed by Pelican.

    
&amp;gt; Where do you want to create your new web site? [.] 
&amp;gt; What will be the title of this web site? blog.mortenvp.com
&amp;gt; Who will be the author of this web site? Morten V. Pedersen
&amp;gt; What will be the default language of this web site? [en] 
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   (Y/n) 
&amp;gt; What is your URL prefix? (see above example; no trailing slash) http://blog.mortenvp.com
&amp;gt; Do you want to enable article pagination? (Y/n) 
&amp;gt; How many articles per page do you want? [10] 
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n) 
&amp;gt; Do you want an auto-reload &amp;amp; simpleHTTP script to assist with theme and site development? (Y/n) 
&amp;gt; Do you want to upload your website using FTP? (y/N) 
&amp;gt; Do you want to upload your website using SSH? (y/N) 
&amp;gt; Do you want to upload your website using Dropbox? (y/N) 
&amp;gt; Do you want to upload your website using S3? (y/N) 
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? (y/N) 
&amp;gt; Do you want to upload your website using GitHub Pages? (y/N) Y
&amp;gt; Is this your personal page (username.github.io)? (y/N) y
Done. Your new project is available at /home/mvp/dev/mortenvp-pelican&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="plugin-enabeling-ipython-notebooks"&gt;Plugin enabeling iPython notebooks&lt;/h2&gt;
&lt;p&gt;Support for including an iPython notebook is available in the &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/liquid_tags"&gt;Liquid-style Tags&lt;/a&gt; plugin. Following the &lt;a href="https://github.com/getpelican/pelican-plugins"&gt;README&lt;/a&gt; in the Pelican Plugins we add the pelican-plugins repository as a submodule:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git submodule add git@github.com:getpelican/pelican-plugins.git&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and activate the liquid-style Tags:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PLUGIN_PATHS = [&amp;#39;pelican-plugins&amp;#39;]
PLUGINS = [&amp;#39;liquid_tags.img&amp;#39;, &amp;#39;liquid_tags.video&amp;#39;,
           &amp;#39;liquid_tags.youtube&amp;#39;, &amp;#39;liquid_tags.vimeo&amp;#39;,
           &amp;#39;liquid_tags.include_code&amp;#39;, &amp;#39;liquid_tags.notebook&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can choose the location for the notebooks by specifying:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NOTEBOOK_DIR = &amp;#39;notebooks&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="including-the-notebook-css-in-our-choosen-theme"&gt;Including the notebook CSS in our choosen theme&lt;/h3&gt;
&lt;p&gt;At the top of the pelicanconf.py add:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from __future__ import unicode_literals
import os&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which enables us to use (copied from &lt;a href="https://github.com/jakevdp/PythonicPerambulations/blob/master/pelicanconf.py"&gt;here&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# The theme file should be updated so that the base header contains the line:
#
#  {% if EXTRA_HEADER %}
#    {{ EXTRA_HEADER }}
#  {% endif %}
# 
# This header file is automatically generated by the notebook plugin
if not os.path.exists(&amp;#39;_nb_header.html&amp;#39;):
    import warnings
    warnings.warn(&amp;quot;_nb_header.html not found.  &amp;quot;
                  &amp;quot;Rerun make html to finalize build.&amp;quot;)
else:
    EXTRA_HEADER = open(&amp;#39;_nb_header.html&amp;#39;).read().decode(&amp;#39;utf-8&amp;#39;)
    &lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="choosing-a-theme"&gt;Choosing a theme&lt;/h2&gt;
&lt;p&gt;I'm not a big fan of the default Pelican theme, so instead I chose to use the &lt;a href="https://github.com/fle/pelican-sober"&gt;Pelican-sober&lt;/a&gt; theme.&lt;/p&gt;
&lt;p&gt;Since the &lt;code&gt;EXTRA_HEADER&lt;/code&gt; section (as described above) isn't present in the Pelican-sober theme's &lt;code&gt;templates/base.html&lt;/code&gt;, we need to add it. To do this I forked the repository to my user and made the changes there.&lt;/p&gt;
&lt;p&gt;Once this is done we can use our chosen theme by editing the &lt;code&gt;THEME&lt;/code&gt; variable in &lt;code&gt;pelican.conf&lt;/code&gt; (read about this &lt;a href="http://nafiulis.me/making-a-static-blog-with-pelican.html#themes"&gt;here&lt;/a&gt;), so to summarize:&lt;/p&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;Select a theme and ensure that it has the &lt;code&gt;EXTRA_HEADER&lt;/code&gt; section.&lt;/li&gt;
&lt;li&gt;Add the theme git repository as a submodule to our site repository &lt;code&gt;git submodule add git@github.com:url-to-repo.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add a &lt;code&gt;THEME = 'pelican-sober'&lt;/code&gt; vaiable inside &lt;code&gt;pelicanconf.py&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="adding-a-post"&gt;Adding a post&lt;/h2&gt;
&lt;p&gt;Adding a post is pretty easy, create a simple markdown file with some basic tags. As an example &lt;code&gt;constent/first_post.md&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Title: My fist post
Date: 2015-02-26 15:00

# About
Here we can write the blog post using markdown&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="including-a-notebook"&gt;Including a notebook&lt;/h2&gt;
&lt;p&gt;To include a notebook called &lt;code&gt;filename.ipynb&lt;/code&gt; copy it to the &lt;code&gt;content/notebooks/&lt;/code&gt; directory and add it to a post using:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{% notebook filename.ipynb %}&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="generating-the-site"&gt;Generating the site&lt;/h2&gt;
&lt;p&gt;I generate the site using &lt;a href="http://docker.com"&gt;Docker&lt;/a&gt; and &lt;a href="http://fabfile.org"&gt;Fabric&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="docker"&gt;Docker&lt;/h3&gt;
&lt;p&gt;Initially when I wanted to generate the site I got and error &lt;code&gt;Incomplete format&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Searching the web the error seems to be related to a Mardown &lt;a href="https://github.com/getpelican/pelican-plugins/pull/321"&gt;issue&lt;/a&gt; with the pelican pugin. The issue was resolved, however comments later indicated that it did not work for everybody, including me.&lt;/p&gt;
&lt;p&gt;One user confirmed that the error occured with Markdown 2.5 and that downgrading to 2.4 solved the issue. To verify this fix I decided to install pelican and the dependencies in a Docker container to not interfer with the system packages already on my system.&lt;/p&gt;
&lt;p&gt;The Docker container I created for this purpose is available &lt;a href="https://registry.hub.docker.com/u/mortenvp/mortenvp-docker/"&gt;here&lt;/a&gt;. The container is invoked using fabric described next.&lt;/p&gt;
&lt;h3 id="fabric"&gt;Fabric&lt;/h3&gt;
&lt;p&gt;Is a tool that can be use to automate performing some tasks either on the local or a remote machine. The &lt;code&gt;pelican-quickstart&lt;/code&gt; already creates a &lt;code&gt;fabfile&lt;/code&gt; for generating and deploying the site. I just adapted it to use If you check the &lt;a href="https://github.com/mortenvp/mortenvp-pelican/blob/master/fabfile.py"&gt;fabfile&lt;/a&gt; in the &lt;a href="https://github.com/mortenvp/mortenvp-pelican"&gt;repository&lt;/a&gt; for this site you will see how I use the docker container to generate the content and then move it to the gihub.io repository.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;</summary></entry></feed>